************************************************************************************************************************************
***IMPORTANT: BELOW CODE IS EXTRACTED FROM A VERY CASE-SPECIFIC SAMPLE BUT IT SERVERS TO SEE A BIT OF WHAT       THE CLASS CAN DO***
***JUST THE PARTS NECESSARY TO UNDERSTAND THE CLASS USAGE ARE EXTRACTED, DO NOT TRY TO COPY PASTE THIS FULL CODE ANYWHERE BECAUSE***                    
***IT WILL NOT WORK AT ALL                                                                                                       ***
************************************************************************************************************************************


START-OF-SELECTION.
  PERFORM: f_initialize_class,          "Generates class names, and prepares general attributes
           f_generate_constructor,      "Generates the constructor method
           f_generate_get_instance,     "Creates the singleton accesor method
           f_generate_so_accessors,     "Generates accesor methods for ARCHIT3 Select Options
           f_generate_bool_accessors,   "Generates accesor methods for ARCHIT3 Booleans
           f_generate_param_accessors,  "Generates accesor methods for ARCHIT3 Parameters
           f_generate_vl_accessors.     "Generates accesor methods for ARCHIT3 Value Lists

  gv_continue = abap_true.
  IF go_generator->check_class_exists_active( go_generator->get_class_name( ) ).
    gv_continue = abap_false.
    "Class already exists? proceed according to selected process mode
    IF p_reg = abap_true.
      DO 2 TIMES.
        "<<<< Regeneration Mode >>>>
        DATA(gv_question) = SWITCH string( sy-index WHEN 1 THEN TEXT-q01 ELSE TEXT-q02 ).
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar       = TEXT-q00
            text_question  = gv_question
          IMPORTING
            answer         = gv_answer
          EXCEPTIONS
            text_not_found = 1
            OTHERS         = 2.
        IF gv_answer <> '1' OR sy-subrc <> 0.
          EXIT.
        ELSEIF sy-subrc = 0 AND sy-index = 2.
          "Complete regen: DELETES OLD CLASS
          go_generator->class_delete(
            EXCEPTIONS
              class_does_not_exist  = 1
              error_during_deletion = 2
              OTHERS                = 3
          ).
          IF sy-subrc <> 0.
            MESSAGE 'Error deleting old version'(e01) TYPE 'S' DISPLAY LIKE 'E'.
          ELSE.
            gv_continue = abap_true.
          ENDIF.
        ENDIF.
      ENDDO.
    ELSEIF  p_delta = abap_true.
      "Genereate a class generator with the current version
      "and add new declarations only
      DATA(go_existing_cls) = zcl_caut_class_generator=>instantiate_from_existing( go_generator->get_class_name( ) ).
      DATA(go_merged) = zcl_caut_class_generator=>merge_classes_to_new( io_class_add  = go_generator
                                                                        io_class_into = go_existing_cls ).
      go_generator = go_merged.
      gv_continue = abap_true.
      gv_overwrite = abap_true.
    ELSE.
      MESSAGE 'Class already exists'(e02) TYPE 'S' DISPLAY LIKE 'E'.
    ENDIF.
  ENDIF.

  "Generate class
  IF gv_continue = abap_true.
    go_generator->generate_class(
      EXPORTING
        iv_overwrite     = gv_overwrite
        iv_pck           = p_pck
      EXCEPTIONS
       class_exists     = 1
       generation_error = 2
       OTHERS           = 3 ).
    IF sy-subrc = 0.
      DATA(gv_msg) = CONV string( TEXT-m05 ).
      REPLACE  ALL OCCURRENCES OF '&1' IN gv_msg WITH go_generator->get_class_name( ) .
      MESSAGE gv_msg TYPE 'I'.
    ELSE.
      MESSAGE 'Something else failed :('(e03) TYPE 'S' DISPLAY LIKE 'E'..
    ENDIF.
  ENDIF.


*&---------------------------------------------------------------------*
*&  Include           ZCAUT_ARCHIT3_AUTOGEN_F01
*&---------------------------------------------------------------------*

FORM f_generate_class_name CHANGING cv_classname TYPE string.
  cv_classname = |ZCL_{ p_pck+1 }_{ p_lgroup }_ARCHIT3|.
  IF p_suffix IS NOT INITIAL.
    cv_classname = cv_classname && |_{ p_suffix }|.
  ENDIF.
ENDFORM.

FORM f_initialize_class.
  DATA: lv_classname TYPE string.

  PERFORM f_generate_class_name CHANGING lv_classname.
  DATA(lv_descr) = |Autogenerated ARCHIT3 accessor for WRICEF {  p_lgroup }|.
  go_generator = zcl_caut_class_generator=>get_new( iv_name      = lv_classname
                                                    iv_descr     = lv_descr
             ).


  "Add the global constant to contain the logicalgroup
  DATA(lv_lgroup_value) = |'{ p_lgroup }'|.
  go_generator->add_constant(
    EXPORTING
      iv_name      = 'GC_LGROUP'
      iv_data_type = 'ZACPF_D_LOGICAL_GROUP'
      iv_value     = lv_lgroup_value
      iv_exposure  = seoc_exposure_public
      iv_descr     = 'ARCHIT3 logical group for WRICEF'(t02)
  ).

  "Add the singleton variable to contain the instance
  go_generator->add_attribute(
    EXPORTING
      iv_name      = 'GO_INSTANCE'
      iv_data_type = CONV rs38l_typ( lv_classname  )
      iv_type      = zcl_caut_class_generator=>gc_prop_typ_statics
      iv_exposure  = seoc_exposure_protected
      iv_descr     = 'Singleton instance'(t09)
      iv_type_ref  = zcl_caut_class_generator=>gc_type_ref_to
  ).

  "And the generic ARCHIT3 accesor
  go_generator->add_attribute(
    EXPORTING
      iv_name      = 'GO_ACCESSOR'
      iv_data_type = CONV rs38l_typ( 'ZCL_ACPF_GENERIC_ARCHIT3_READ'  )
      iv_type      = zcl_caut_class_generator=>gc_prop_typ_data
      iv_exposure  = seoc_exposure_protected
      iv_descr     = 'ARCHIT3 accessor'(t10)
      iv_type_ref  = zcl_caut_class_generator=>gc_type_ref_to
  ).

  "Add the types for the parsed value lists
  CONCATENATE       'BEGIN OF gty_s_parsed_vl,  '
                  '  field01 TYPE string,     '
                  '  field02 TYPE string,     '
                  '  field03 TYPE string,     '
                  '  field04 TYPE string,     '
                  '  field05 TYPE string,     '
                  '  field06 TYPE string,     '
                  '  field07 TYPE string,     '
                  '  field08 TYPE string,     '
                  '  field09 TYPE string,     '
                  '  field10 TYPE string,     '
                  '  field11 TYPE string,     '
                  '  field12 TYPE string,     '
                  '  field13 TYPE string,     '
                  '  field14 TYPE string,     '
                  '  field15 TYPE string,     '
                  'END OF gty_s_parsed_vl.    '
                  INTO DATA(lv_type_src) SEPARATED BY cl_bcs_convert=>gc_crlf.

  go_generator->add_type(
    EXPORTING
      iv_name     = 'GTY_S_PARSED_VL'
      iv_src      = lv_type_src
      iv_exposure = seoc_exposure_public
  ).

  lv_type_src = |gty_t_parsed_vl TYPE STANDARD TABLE OF gty_s_parsed_vl WITH DEFAULT KEY.|.
  go_generator->add_type(
    EXPORTING
      iv_name     = 'GTY_T_PARSED_VL'
      iv_src      = lv_type_src
      iv_exposure = seoc_exposure_public
  ).


ENDFORM.

FORM f_generate_bool_accessors.
  "Get all SO deffinitions from DB
  SELECT boolean_name
    FROM zacpf_c_lg_dv_b
    INTO TABLE @DATA(lt_sos)
    WHERE logical_group = @p_lgroup.

  CHECK sy-subrc = 0.

  LOOP AT lt_sos ASSIGNING FIELD-SYMBOL(<ls_bool>).
    PERFORM f_generate_get_boolean_method USING <ls_bool>-boolean_name.
  ENDLOOP.

ENDFORM.

FORM f_generate_so_accessors.
  "Get all SO deffinitions from DB
  SELECT selopt_name
    FROM zacpf_c_lg_dv_s
    INTO TABLE @DATA(lt_sos)
    WHERE logical_group = @p_lgroup.

  CHECK sy-subrc = 0.

  LOOP AT lt_sos ASSIGNING FIELD-SYMBOL(<ls_so>).
    PERFORM f_generate_get_so_method USING <ls_so>-selopt_name.
  ENDLOOP.

ENDFORM.

FORM f_generate_param_accessors.
  "Get all SO deffinitions from DB
  SELECT param_name, data_element
    FROM zacpf_c_lg_dv_p
    INTO TABLE @DATA(lt_params)
    WHERE logical_group = @p_lgroup.

  CHECK sy-subrc = 0.

  LOOP AT lt_params ASSIGNING FIELD-SYMBOL(<ls_param>).
    PERFORM f_generate_get_param_method  USING <ls_param>-param_name <ls_param>-data_element.
  ENDLOOP.

ENDFORM.

FORM f_generate_vl_accessors.
  "Get all definitions from DB
  SELECT list_name
  FROM zacpf_c_lg_dv_l
  INTO TABLE @DATA(lt_vlists)
  WHERE logical_group = @p_lgroup.

  CHECK sy-subrc = 0.

  "Add the value list parser method
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  " 002 | 2024-07-30 | PBE00A2H
  " Add method for parsing of a Value List to given typed table
  PERFORM generate_parse_value_to_typed.

  APPEND   'SPLIT iv_value AT iv_separator INTO  rs_parsed-field01  ' TO lt_source.
  APPEND   '                                     rs_parsed-field02  ' TO lt_source.
  APPEND   '                                     rs_parsed-field03  ' TO lt_source.
  APPEND   '                                     rs_parsed-field04  ' TO lt_source.
  APPEND   '                                     rs_parsed-field05  ' TO lt_source.
  APPEND   '                                     rs_parsed-field06  ' TO lt_source.
  APPEND   '                                     rs_parsed-field07  ' TO lt_source.
  APPEND   '                                     rs_parsed-field08  ' TO lt_source.
  APPEND   '                                     rs_parsed-field09  ' TO lt_source.
  APPEND   '                                     rs_parsed-field10  ' TO lt_source.
  APPEND   '                                     rs_parsed-field11  ' TO lt_source.
  APPEND   '                                     rs_parsed-field12  ' TO lt_source.
  APPEND   '                                     rs_parsed-field13  ' TO lt_source.
  APPEND   '                                     rs_parsed-field14  ' TO lt_source.
  APPEND   '                                     rs_parsed-field15. ' TO lt_source.

  APPEND INITIAL LINE TO lt_parameters ASSIGNING FIELD-SYMBOL(<ls_param>).
  <ls_param>-param_name =  'RS_PARSED'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'GTY_S_PARSED_VL'.

  APPEND INITIAL LINE TO lt_parameters ASSIGNING <ls_param>.
  <ls_param>-param_name =  'IV_VALUE'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_importing.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'CLIKE'.

  APPEND INITIAL LINE TO lt_parameters ASSIGNING <ls_param>.
  <ls_param>-param_name =  'IV_SEPARATOR'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_importing.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'CLIKE'.

  go_generator->add_method(
    EXPORTING
      iv_name     = 'PARSE_VALUE'
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_private
      iv_redefine = abap_false
      iv_desc     = 'Parse a value from a value list'(t11)
      iv_source   = lt_source
      iv_params   = lt_parameters
  ).
  "Add the separator determiner method
  CLEAR: lt_source, lt_parameters.
  APPEND INITIAL LINE TO lt_parameters ASSIGNING <ls_param>.
  <ls_param>-param_name =  'RV_SEPARATOR'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'CHAR1'.

  APPEND INITIAL LINE TO lt_parameters ASSIGNING <ls_param>.
  <ls_param>-param_name =  'IV_VALUE'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_importing.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'CLIKE'.

  APPEND |   rv_separator = ';'. "Default to semicolon      |   TO lt_source.
  APPEND |   FIND FIRST OCCURRENCE OF '{ '|' }' IN iv_value.|   TO lt_source.
  APPEND |   CHECK sy-subrc = 0.                            |   TO lt_source.
  APPEND |   "Switch to pipe if needed                      |   TO lt_source.
  APPEND |   rv_separator = '{ '|' }'.                      |   TO lt_source.

  go_generator->add_method(
    EXPORTING
      iv_name     = 'DETERMINE_VL_SEPARATOR'
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_private
      iv_redefine = abap_false
      iv_desc     = 'Determine if pipe or semicolon'(t12)
      iv_source   = lt_source
      iv_params   = lt_parameters
  ).


  "Add the generic value parser method
  CLEAR: lt_source, lt_parameters.
  APPEND INITIAL LINE TO lt_parameters ASSIGNING <ls_param>.
  <ls_param>-param_name =  'RT_VALUES'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'GTY_T_PARSED_VL'.

  APPEND INITIAL LINE TO lt_parameters ASSIGNING <ls_param>.
  <ls_param>-param_name =  'IT_RAW'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_importing.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'ZACPF_TT_LG_DV_VALUE_LIST'.


  APPEND |   LOOP AT it_raw ASSIGNING FIELD-SYMBOL(<ls_raw>).                                                      |   TO lt_source.
  APPEND |     IF sy-tabix = 1.                                                                                    |   TO lt_source.
  APPEND |       DATA(lv_separator) = me->determine_vl_separator( <ls_raw>-value ).                                |   TO lt_source.
  APPEND |     ENDIF.                                                                                              |   TO lt_source.
  APPEND |     APPEND parse_value( iv_separator = lv_separator iv_value = <ls_raw>-value ) TO rt_values.           |   TO lt_source.
  APPEND |   ENDLOOP.                                                                                              |   TO lt_source.

  go_generator->add_method(
    EXPORTING
      iv_name     = 'PARSE_VALUE_LIST'
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_private
      iv_redefine = abap_false
      iv_desc     = 'Parse raw value list into structured'(t13)
      iv_source   = lt_source
      iv_params   = lt_parameters ).

  "And one method per value list
  LOOP AT lt_vlists ASSIGNING FIELD-SYMBOL(<ls_vlist>).
    PERFORM f_generate_get_vl_method  USING <ls_vlist>-list_name.
  ENDLOOP.

ENDFORM.
FORM f_generate_constructor.
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  "Method source definition
  APPEND |go_accessor = NEW zcl_acpf_generic_ARCHIT3_read( gc_lgroup ).| TO lt_source.


  go_generator->add_method(
    EXPORTING
      iv_name     = 'CONSTRUCTOR'
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_private
      iv_redefine = abap_false
      iv_desc     = 'Internal constructor'(t08)
      iv_source   = lt_source
      iv_params   = lt_parameters ).
ENDFORM.
FORM f_generate_get_instance.
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  "Method source definition
  APPEND |  IF go_instance IS NOT BOUND.| TO lt_source.
  APPEND |    CREATE OBJECT go_instance TYPE { go_generator->get_class_name( ) }.| TO lt_source.
  APPEND |  ENDIF.| TO lt_source.
  APPEND |  ro_instance ?= go_instance.| TO lt_source.
  "Parameters
  APPEND INITIAL LINE TO lt_parameters ASSIGNING FIELD-SYMBOL(<ls_param>).
  <ls_param>-param_name =  'RO_INSTANCE'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_ref_to.
  <ls_param>-data_type  =  go_generator->get_class_name( ).

  go_generator->add_method(
    EXPORTING
      iv_name     = 'GET_INSTANCE'
      iv_static   = abap_true
      iv_exposure = zcl_caut_class_generator=>gc_exposure_public
      iv_redefine = abap_false
      iv_desc     = 'Singleton instance getter'(t03)
      iv_source   = lt_source
      iv_params   = lt_parameters ).
ENDFORM.

FORM f_generate_get_so_method USING iv_so_name.
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  "Method source definition
  APPEND |  rt_values = go_accessor->get_select_options( '{ iv_so_name }' ).| TO lt_source.
  "Parameters
  APPEND INITIAL LINE TO lt_parameters ASSIGNING FIELD-SYMBOL(<ls_param>).
  <ls_param>-param_name =  'RT_VALUES'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'ZACPF_TT_LG_DV_GENERIC_RANGE'.


  "Generates an accessor for a get select options methods
  DATA(lv_descr) = |{ 'Accessor for SO:'(t05) } { iv_so_name }|.

  go_generator->add_method(
    EXPORTING
      iv_name     = iv_so_name
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_public
      iv_redefine = abap_false
      iv_desc     = lv_descr
      iv_source   = lt_source
      iv_params   = lt_parameters ).
ENDFORM.


FORM f_generate_get_vl_method USING iv_vl_name.
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  "Method source definition
  APPEND |rt_values = me->parse_value_list( go_accessor->get_values_list( '{ iv_vl_name }' ) ).| TO lt_source.
  "Parameters
  APPEND INITIAL LINE TO lt_parameters ASSIGNING FIELD-SYMBOL(<ls_param>).
  <ls_param>-param_name =  'RT_VALUES'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  'GTY_T_PARSED_VL'.


  "Generates an accessor for a get select options methods
  DATA(lv_descr) = |{ 'Accessor for VL:'(t04) } { iv_vl_name }|.

  go_generator->add_method(
    EXPORTING
      iv_name     = iv_vl_name
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_public
      iv_redefine = abap_false
      iv_desc     = lv_descr
      iv_source   = lt_source
      iv_params   = lt_parameters ).
ENDFORM.

FORM f_generate_get_param_method USING iv_param_name iv_type.
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  "Method source definition
  APPEND |  go_accessor->get_parameter( EXPORTING iv_name = '{ iv_param_name }' IMPORTING ev_param_value = rv_value  ).| TO lt_source.

  "Parameters
  APPEND INITIAL LINE TO lt_parameters ASSIGNING FIELD-SYMBOL(<ls_param>).
  <ls_param>-param_name =  'RV_VALUE'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  =  iv_type.

  "Generates an accessor for a get select options methods
  DATA(lv_descr) = |{ 'Accessor for PA:'(t06) } { iv_param_name }|.

  go_generator->add_method(
    EXPORTING
      iv_name     = iv_param_name
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_public
      iv_redefine = abap_false
      iv_desc     = lv_descr
      iv_source   = lt_source
      iv_params   = lt_parameters
  ).
ENDFORM.

FORM f_generate_get_boolean_method USING iv_bool_name.
  DATA: lt_source     TYPE rswsourcet,
        lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params.

  "Method source definition
  APPEND |  rv_value = go_accessor->get_boolean( '{ iv_bool_name }' ).|  TO lt_source.

  "Parameters
  APPEND INITIAL LINE TO lt_parameters ASSIGNING FIELD-SYMBOL(<ls_param>).
  <ls_param>-param_name =  'RV_VALUE'.
  <ls_param>-param_type =  zcl_caut_class_generator=>gc_returning.
  <ls_param>-ref_type   =  zcl_caut_class_generator=>gc_type_type.
  <ls_param>-data_type  = 'BOOLEAN'.

  "Generates an accessor for a get select options methods
  DATA(lv_descr) = |{ 'Accessor for BO:'(t07) } { iv_bool_name }|.

  go_generator->add_method(
    EXPORTING
      iv_name     = iv_bool_name
      iv_static   = abap_false
      iv_exposure = zcl_caut_class_generator=>gc_exposure_public
      iv_redefine = abap_false
      iv_desc     = lv_descr
      iv_source   = lt_source
      iv_params   = lt_parameters
  ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CHECK_AUTH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_check_auth .
  CONSTANTS: lc_tcode TYPE syst-tcode VALUE 'ZCAUT_ARCHIT3_AUTOGEN'.
  CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
    EXPORTING
      tcode  = lc_tcode
    EXCEPTIONS
      ok     = 1
      not_ok = 2
      OTHERS = 3.
  IF sy-subrc <> 1.
    MESSAGE e059(eu) WITH lc_tcode RAISING permission_failure.
  ENDIF.
ENDFORM.

" 002 | 2024-07-30 | PBE00A2H
" Add method for parsing of a Value List to given typed table
FORM generate_parse_value_to_typed.
  DATA:
    lt_exceptions TYPE zcl_caut_class_generator=>gty_t_method_exceptions,
    lt_parameters TYPE zcl_caut_class_generator=>gty_t_method_params,
    lt_source     TYPE rswsourcet.

  APPEND   '    FIELD-SYMBOLS:' TO lt_source.
  APPEND   '      <lv_field> TYPE any,' TO lt_source.
  APPEND   '      <ls_value> TYPE any.' TO lt_source.
  APPEND   ' ' TO lt_source.
  APPEND   '    CLEAR ct_values.' TO lt_source.
  APPEND   ' ' TO lt_source.
  APPEND   '    LOOP AT it_values REFERENCE INTO DATA(ld_value).' TO lt_source.
  APPEND   '      SPLIT ld_value->value AT iv_separator INTO TABLE DATA(lt_parts).' TO lt_source.
  APPEND   '      APPEND INITIAL LINE TO ct_values ASSIGNING <ls_value>.' TO lt_source.
  APPEND   ' ' TO lt_source.
  APPEND   '      LOOP AT lt_parts INTO DATA(lv_part).' TO lt_source.
  APPEND   '        ASSIGN COMPONENT sy-tabix OF STRUCTURE <ls_value> TO <lv_field>.' TO lt_source.
  APPEND   '        IF sy-subrc <> 0.' TO lt_source.
  APPEND   '          EXIT.' TO lt_source.
  APPEND   '        ENDIF.' TO lt_source.
  APPEND   ' ' TO lt_source.
  APPEND   '        <lv_field> = lv_part.' TO lt_source.
  APPEND   '      ENDLOOP.' TO lt_source.
  APPEND   '    ENDLOOP.' TO lt_source.

  APPEND INITIAL LINE TO lt_parameters REFERENCE INTO DATA(ld_parameter).
  ld_parameter->param_name = 'IV_SEPARATOR'.
  ld_parameter->param_type = zcl_caut_class_generator=>gc_importing.
  ld_parameter->ref_type = zcl_caut_class_generator=>gc_type_type.
  ld_parameter->data_type = 'CHAR1'.
  ld_parameter->order = 1.

  APPEND INITIAL LINE TO lt_parameters REFERENCE INTO ld_parameter.
  ld_parameter->param_name = 'IT_VALUES'.
  ld_parameter->param_type = zcl_caut_class_generator=>gc_importing.
  ld_parameter->ref_type = zcl_caut_class_generator=>gc_type_type.
  ld_parameter->data_type = 'ZACPF_TT_LG_DV_VALUE_LIST'.
  ld_parameter->pass_type = zcl_caut_class_generator=>gc_pass_type_reference.
  ld_parameter->order = 2.

  APPEND INITIAL LINE TO lt_parameters REFERENCE INTO ld_parameter.
  ld_parameter->param_name = 'CT_VALUES'.
  ld_parameter->param_type = zcl_caut_class_generator=>gc_changing.
  ld_parameter->ref_type = zcl_caut_class_generator=>gc_type_type.
  ld_parameter->data_type = 'STANDARD TABLE'.
  ld_parameter->pass_type = zcl_caut_class_generator=>gc_pass_type_reference.
  ld_parameter->order = 3.

  APPEND INITIAL LINE TO lt_exceptions REFERENCE INTO DATA(ld_exception).
  ld_exception->name = 'CX_SY_CONVERSION_ERROR'.

  go_generator->add_method(
    iv_name = 'PARSE_VALUE_LIST_TO_TYPED'
    iv_static = abap_true
    iv_exposure = zcl_caut_class_generator=>gc_exposure_public
    iv_redefine = abap_false
    iv_desc = 'Parse generic Value List to a typed table'(t13)
    iv_class_exceptions = abap_true
    iv_source = lt_source
    iv_params = lt_parameters
    it_exceptions = lt_exceptions ).
ENDFORM.
